<<<<<<< HEAD
def myAtoi(s: str) -> int:
    # Remove leading whitespace
    s = s.lstrip()

    # Check for sign
    sign = 1
    if s and s[0] in ['-', '+']:
        if s[0] == '-':
            sign = -1
        s = s[1:]

    # Read digits
    digits = ''
    for char in s:
        if char.isdigit():
            digits += char
        else:
            break

    # Convert to integer
    num = int(digits) if digits else 0

    # Apply sign
    num *= sign

    # Clamp to 32-bit signed integer range
    num = max(-2**31, min(num, 2**31 - 1))

    return num


print(myAtoi('1337c0d3'))
print(myAtoi(' -042'))
print(myAtoi('0-1'))
print(myAtoi("words and 987"))
=======
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
        dp[0][0] = True
        for i in range(len(s) + 1):
            for j in range(1, len(p) + 1):
                if p[j - 1] in {s[i - 1], '.'}:
                    dp[i][j] |= dp[i - 1][j - 1]
                if p[j - 1] == '*':
                    dp[i][j] |= dp[i][j - 2]
                    if p[j - 2] in {s[i - 1], '.'}:
                        dp[i][j] |= dp[i - 1][j]
        return dp[-1][-1]


sol = Solution()
print(sol.isMatch("aacc", "a*"))
# print(sol.isMatch("aab", "c*a*b"))
>>>>>>> 0846ce4 (First commit on work laptop)

